---
- name: Create security group
  os_security_group:
          name: "{{ item.name }}"
          description: "{{ item.description }}"
          state: present
  with_items:
    - name: ssh
      description: visit with ssh
    - name: http
      description: visit with http
    - name: couchdb
      description: for clustered couchdb

- name: Create security group rules
  os_security_group_rule:
          security_group: "{{ item.name }}"
          protocol: "{{ item.protocol }}"
          port_range_min: "{{ item.port_range_min }}"
          port_range_max: "{{ item.port_range_max }}"
          remote_ip_prefix: "{{ item.remote_ip_prefix }}"
          state: present
  with_items: "{{ security_rules }}"




- name: Create instance1
  os_server:
    state: "{{ state }}"
    name: "{{ instance.name1 }}"
    # Ubuntu 18.04 LTS (Bionic) amd64 (pre-installed murano-agent with Docker)
    image: "{{ instance.image }}"
    key_name: "{{ instance.key_name }}"
    wait: yes
    availability_zone: "{{ instance.availability_zone }}"
    flavor: "{{ instance.flavor }}"
    network: "{{ instance.network }}"
    auto_floating_ip: yes
    security_groups: ["couchdb","http","ssh"]
  register: server1

- debug:
    msg: "IP address of node1: {{ server1.openstack.public_v4 }}"

- name: Create instance2
  os_server:
    state: "{{ state }}"
    name: "{{ instance.name2 }}"
    # Ubuntu 18.04 LTS (Bionic) amd64 (pre-installed murano-agent with Docker)
    image: "{{ instance.image }}"
    key_name: "{{ instance.key_name }}"
    wait: yes
    availability_zone: "{{ instance.availability_zone }}"
    flavor: "{{ instance.flavor }}"
    network: "{{ instance.network }}"
    auto_floating_ip: yes
    security_groups: ["couchdb","http","ssh"]
  register: server2

- debug:
    msg: "IP address of node2: {{ server2.openstack.public_v4 }}"

- name: Create instance3
  os_server:
    state: "{{ state }}"
    name: "{{ instance.name3 }}"
    # Ubuntu 18.04 LTS (Bionic) amd64 (pre-installed murano-agent with Docker)
    image: "{{ instance.image }}"
    key_name: "{{ instance.key_name }}"
    wait: yes
    availability_zone: "{{ instance.availability_zone }}"
    flavor: "{{ instance.flavor }}"
    network: "{{ instance.network }}"
    auto_floating_ip: yes
    security_groups: ["couchdb","http","ssh"]
  register: server3

- debug:
    msg: "IP address of node3: {{ server3.openstack.public_v4 }}"

- name: Create instance4
  os_server:
    state: "{{ state }}"
    name: "{{ instance.name4 }}"
    # Ubuntu 18.04 LTS (Bionic) amd64 (pre-installed murano-agent with Docker)
    image: "{{ instance.image }}"
    key_name: "{{ instance.key_name }}"
    wait: yes
    availability_zone: "{{ instance.availability_zone }}"
    flavor: "{{ instance.flavor }}"
    network: "{{ instance.network }}"
    auto_floating_ip: yes
    security_groups: ["couchdb","http","ssh"]
  register: server4

- debug:
    msg: "IP address of node4: {{ server4.openstack.public_v4 }}"

- name: create volume
  os_volume:
    state: "{{ state }}"
    availability_zone: "{{ instance.availability_zone }}"
    size: "{{ volume.volume_size }}"
    display_name: "{{ item }}"
  with_items:
    - "{{ volume.name1 }}"
    - "{{ volume.name2 }}"
    - "{{ volume.name3 }}"
    - "{{ volume.name4 }}"

- name: attach volume
  os_server_volume:
    state: "{{ state }}"
    server: "{{ item.servername }}"
    volume: "{{ item.volumename }}"
    device: /dev/vdb
  with_items:
    - servername: "{{ instance.name1 }}"
      volumename: "{{ volume.name1 }}"
    - servername: "{{ instance.name2 }}"
      volumename: "{{ volume.name2 }}"
    - servername: "{{ instance.name3 }}"
      volumename: "{{ volume.name3 }}"
    - servername: "{{ instance.name4 }}"
      volumename: "{{ volume.name4 }}"


- name: add hosts to inventory
  become: yes
  lineinfile:
    state: "{{ state }}"
    path: /etc/ansible/hosts
    line: '{{ item }}'
  with_items:
    - "[{{ hosts_group }}]"
    - "{{ server1.openstack.public_v4 }} ansible_ssh_private_key_file={{ instance.key_file_path }}"
    - "{{ server2.openstack.public_v4 }} ansible_ssh_private_key_file={{ instance.key_file_path }}"
    - "{{ server3.openstack.public_v4 }} ansible_ssh_private_key_file={{ instance.key_file_path }}"
    - "{{ server4.openstack.public_v4 }} ansible_ssh_private_key_file={{ instance.key_file_path }}"

- name: change host_key_checking to false
  become: yes
  lineinfile:
    insertafter: '^[defaults]'
    path: /etc/ansible/ansible.cfg
    state: present
    line: host_key_checking = False




